Towards proof of (echReduce1_rhs_FS)
=====

fspr : (k : Fin predm ** someNonZnessNel = FS k)

let leadeln = getWitness fspr
let proofGoalSnd = getProof fspr
exact (leadeln ** (_,proofGoalSnd))
Goal:
downAndNotRightOfEntryImpliesZ xs narg leadeln

lnzcEq : leadingNonzeroCalc $ index narg $ map ((Pos 0)::) xs
	= Right (someNonZnessNel ** someNonZnessFn)

-----

Tactic: leadingNonzeroCalc xs'_narg
is either Left ..., w/c we can use to show absurdity using the assumption
	lnzcEq,
or is Right (FS t ** u)
for some (t). Namely, being Right (FZ ** u') is absurd, as then

	leadingNonzeroCalc $ 0::xs_narg = Right (FZ ** u'),

w/c implies

	Not ((0::xs_narg)_FZ = 0)

by indexMapEq/Chariz.

Furthermore,

	leadingNonzeroCalc xs'_narg

is either Left ...

or some t
& proof
	leadingNonzeroCalc xs'_narg = Right (FS t ** u)
& that
some v, & proof
	leadingNonzeroCalc xs_narg = Right (t ** v)

-----

Given this,

we can apply

	echxs xs narg : echTy xs narg

to the

	leadingNonzeroCalc xs_narg = Right (t ** v)

converted to

	Not (leadingNonzeroCalc xs_narg = Left _)

to deduce the (downAndNotRightOfEntryImpliesZ xs narg _) value of the (echTy xs narg)

> claim redEchToRight (pech : echTy xs narg) -> (t : _) -> (v : _) -> (ech2RlnzcEq : leadingNonzeroCalc $ index narg xs = Right (t ** v)) -> (indEchRight : _ ** downAndNotRightOfEntryImpliesZ xs narg indEchRight)
> intros

 pech : echTy xs narg
 t : Fin predm
 v : (\nel =>
        (LTE (S (finToNat i)) (finToNat nel) ->
         index i (index narg xs) = Pos 0,
         (index nel (index narg xs) = Pos 0) -> Void)) t
 ech2RlnzcEq : leadingNonzeroCalc (index narg xs) =
               Right (t ** v)
----------                 Goal:                  ----------
{hole50} : (indEchRight : Fin predm ** downAndNotRightOfEntryImpliesZ xs
                                                                      narg
                                                                      indEchRight)

extractEchAlt xs narg pech :
	Either (leadfn : (nelow : Fin n) ->
		LTRel (finToNat narg) (finToNat nelow) ->
			index nelow xs = neutral ** pech ~=~ leadfn)
		(nel : Fin predm
			** (danrz : downAndNotRightOfEntryImpliesZ xs narg nel
				** pech ~=~ danrz))

> claim redEchLeftElm ( echLlnzcEq : leadingNonzeroCalc (index narg xs) = Right (t ** v) ) -> ( leadfn : (nelow : Fin n) -> LTRel (finToNat narg) (finToNat nelow) -> index nelow xs = neutral ** pech ~=~ leadfn ) -> Void

> unfocus

redEchLeftElm ech2RlnzcEq : (leadfn : _) -> Void
w/ strategy
< exact runIso eitherBotRight _

> :t runIso eitherBotRight $ map (redEchLeftElm ech2RlnzcEq) $ mirror $ extractEchAlt xs narg pech
runIso eitherBotRight
       (map (redEchLeftElm ech2RlnzcEq)
            (mirror (extractEchAlt xs
                                   narg
                                   pech)))
	: (nel : Fin predm ** (danrz : (i : Fin n)
		-> (j : Fin predm)
		-> (finToNat narg) < finToNat i)
		-> Either (finToNat j < finToNat nel)
			(finToNat j = finToNat nel)
		-> index j (index i xs) = Pos 0 ** pech = danrz))

> let extractedEchRight = runIso eitherBotRight $ map (redEchLeftElm ech2RlnzcEq) $ mirror $ extractEchAlt xs narg pech

i.e., same type as just shown;

	(nel : Fin predm ** (danrz : downAndNotRightOfEntryImpliesZ xs narg nel
		** pech ~=~ danrz))

> exact (getWitness extractedEchRight ** getWitness $ getProof extractedEchRight)

Hooraaay!

This completes the proof of (redEchToRight).

-----

What can we construct from this again?

> claim redEchToRight (pech : echTy xs narg) -> (t : _) -> (v : _) -> (ech2RlnzcEq : leadingNonzeroCalc $ index narg xs = Right (t ** v)) -> (indEchRight : _ ** downAndNotRightOfEntryImpliesZ xs narg indEchRight)
> unfocus

claim 
let kappa = redEchToRight _ _ _
let indEchRight = getWitness kappa
let sundry = the (danrz xs narg indEchRight) getProof kappa

What... willl......

I feel like (indEchRight) should actually be equal to the argument (t) if
we're going to get any work out of this proof. I mean, that seems like the actual application of the (pech) argument to construct.

We could've used

	extractEchAltStep2 xs (some rowEchelon xs) narg

instead of

	extractEchAlt xs narg pech

to have it extract specifically that (echxs narg) is the danrz computed.

That doesn't seem to be the goal, directly at least.

---

I think what we need to prove is

1) Given
	someNonZnessNel = FS leadeln
2) Given a proof this implies
	leadingNonzeroCalc xs_narg = Right (leadeln ** _)
3) Given our separate proof that
	danrz xs narg indEchRight
constructed from the (redEchToRight) lemma proved above

We can prove (indEchRight = leadeln), which proves the goal by rewriting (3).
I claim we can:

Strategy:
Note that in the context of the proof of (redEchToRight) we can actually show
the (danrz) is equal to (echxs narg) if we use that as its (pech) argument.

Hence, if we know that (echxs narg) produces a (danrz xs narg indEchRight)
WITH (lnzc xs_narg)'S INNER WITNESS AS (indEchRight), then we know from (2)
that (indEchRight = leadeln).

Situation 1)

We extract

	leadingNonzeroCalc xs_narg = Right (indEchRight ** _)

from (echxs narg = Right _) as shown in the context of the proof of (redEchToRight).

We can then (trans) with the characterization of (someNonZnessNel = FS leadeln)
as the implication

	leadingNonzeroCalc xs_narg = Right (leadeln ** _)

to obtain the full proof of (echReduce1) (for this pattern).

Situation 2)

We're not able to extract the (indEchRight) of (echxs narg) satisfying

	leadingNonzeroCalc xs_narg = Right (indEchRight ** _),

so we're unable to produce the goal with the first technique.

In that event, we write (extractEchAlt) anew so that it proves, rather than an
equality with the value of the (echTy xs narg), that for the (danrz xs narg indEchRight)
it produces, (indEchRight) satisfies

	leadingNonzeroCalc xs_narg = Right (indEchRight ** _).

From this we can (trans) with the characterization of (someNonZnessNel = FS leadeln)
as the implication

	leadingNonzeroCalc xs_narg = Right (leadeln ** _)

to prove (echReduce1) (for this pattern).

-----

To get the equation

	someNonZnessNel = FS leadeln

the original strategy can be elaborated with the following argument:

if

	leadingNonzeroCalc xs_narg = Right (n ** pr)

then

	for some pr : _,
	leadingNonzeroCalc xs'_narg = Right (FS n ** pr).

Then by

	lnzcEq : leadingNonzeroCalc $ index narg $ map ((Pos 0)::) xs
		= Right (someNonZnessNel ** someNonZnessFn),

	trans (sym _) lnzcEq : Right (FS n ** pr)
		= Right (someNonZnessNel ** someNonZnessFn)

& hence

	FS n = someNonZnessNel

indeed, without using (fspr) directly.

Observe:

	lnzcElim {xs=xs} narg : Either (index narg xs = Algebra.neutral)
		(someNonZness :
			(nel : Fin _ ** i < nel -> xs_narg_i = 0, Not xs_narg_nel=0)
			** leadingNonzeroCalc xs_narg = Right someNonZness)

thereby we may write

	let lex = eitherBotRight
		$ map (some xs_narg = 0 -> Void)
		$ mirror
		$ lnzcElim {xs=xs} narg
	let leadelnDerived = getWitness $ getWitness lex
	let leadelnDIsLeadeln = getProof lex

so that

	leadelnDIsLeadeln : leadingNonzeroCalc xs_narg = Right (leadelnDerived ** _)

as required.

Hence, we can use a derivation of (lnzc xs'_narg) from (lnzc xs_narg) to complete the
equation, rather than a derivation of (lnzc xs_narg) from (lnzc xs'_narg) & use the
absurdity of (xs_narg = 0) given (Not xs'_narg = 0) rather than the absurdity of the
leading 0 of (xs'_narg) being at FZ.

---

Goals:
1) characterization of (lnzc xs'_narg) given (lnzc xs'_narg = Right (n ** _))
2) Modify (extractEchAlt) to show, rather than an equality w/ the (echTy xs narg),
that for the (danrz xs narg indEchRight) it produces, (indEchRight) satisfies

	leadingNonzeroCalc xs_narg = Right (indEchRight ** _).

Goal 1 is implemented by

	lnzcNullext : leadingNonzeroCalc v = Right (k ** pr)
		-> (pr' : ((i : Fin _) -> LTRel (finToNat i) (finToNat (FS k))
				-> index i $ (Pos 0)::v = Pos 0,
				Not (index (FS k) $ (Pos 0)::v = Pos 0))
			** leadingNonzeroCalc $ (Pos 0)::v = Right (FS k ** pr'))

w/c is morally of type

	map getWitness $ leadingNonzeroCalc v = Right k
		-> map getWitness $ leadingNonzeroCalc $ (Pos 0)::v = Right (FS k)

We could possible make something with that type if we wrote (Sigma.getWitness), since
(leadingNonzeroIsFZIfNonzero) did that succesfully. It's worth having figured out how
to do the full thing, though, since other places may need to take proof part given them.
